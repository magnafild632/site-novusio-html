#!/bin/bash

# =============================================================================
# Menu Principal - Site Novusio
# Sistema de gerenciamento do deploy
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configura√ß√µes padr√£o
PROJECT_PATH="/home/$(whoami)/site-novusio"
SERVICE_NAME="novusio"
NGINX_CONFIG="/etc/nginx/sites-available/novusio"

# Fun√ß√£o para exibir banner
show_banner() {
    clear
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë              üéõÔ∏è  MENU NOVUSIO MANAGER üéõÔ∏è                   ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë              Sistema de Gerenciamento do Deploy              ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

# Fun√ß√£o para erro
error() {
    echo -e "${RED}[ERRO]${NC} $1" >&2
}

# Fun√ß√£o para aviso
warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Fun√ß√£o para info
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Verificar se o projeto est√° instalado
check_installation() {
    if [[ ! -d "$PROJECT_PATH" ]]; then
        error "Projeto n√£o encontrado em $PROJECT_PATH"
        error "Execute primeiro o script deploy.sh para instalar o projeto."
        exit 1
    fi
}

# Verificar se √© root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error "Este script n√£o deve ser executado como root!"
        exit 1
    fi
}

# Mostrar status do sistema
show_status() {
    clear
    echo -e "${CYAN}üìä Status do Sistema${NC}"
    echo -e "${YELLOW}===================${NC}"
    echo ""
    
    # Status do servi√ßo
    echo -e "${BLUE}üîß Servi√ßo Novusio:${NC}"
    if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
        echo -e "   Status: ${GREEN}‚úÖ Rodando${NC}"
    else
        echo -e "   Status: ${RED}‚ùå Parado${NC}"
    fi
    
    # Status do Nginx
    echo -e "${BLUE}üåê Nginx:${NC}"
    if sudo systemctl is-active --quiet nginx; then
        echo -e "   Status: ${GREEN}‚úÖ Rodando${NC}"
    else
        echo -e "   Status: ${RED}‚ùå Parado${NC}"
    fi
    
    # Status do SSL
    echo -e "${BLUE}üîí SSL:${NC}"
    if sudo certbot certificates 2>/dev/null | grep -q "Certificate Name"; then
        echo -e "   Status: ${GREEN}‚úÖ Configurado${NC}"
    else
        echo -e "   Status: ${YELLOW}‚ö†Ô∏è  N√£o configurado${NC}"
    fi
    
    # Status do banco de dados
    echo -e "${BLUE}üóÑÔ∏è  Banco de Dados:${NC}"
    if [[ -f "$PROJECT_PATH/database.sqlite" ]]; then
        echo -e "   Status: ${GREEN}‚úÖ Existe${NC}"
    else
        echo -e "   Status: ${RED}‚ùå N√£o encontrado${NC}"
    fi
    
    # Uso de disco
    echo -e "${BLUE}üíæ Uso de Disco:${NC}"
    echo -e "   Projeto: $(du -sh "$PROJECT_PATH" 2>/dev/null | cut -f1 || echo 'N/A')"
    
    # Logs recentes
    echo -e "${BLUE}üìù Logs Recentes:${NC}"
    sudo journalctl -u "$SERVICE_NAME" --since "1 hour ago" --no-pager | tail -3 | sed 's/^/   /'
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Instalar projeto
install_project() {
    clear
    echo -e "${CYAN}üöÄ Instala√ß√£o do Projeto${NC}"
    echo -e "${YELLOW}=========================${NC}"
    echo ""
    
    if [[ -d "$PROJECT_PATH" ]]; then
        warning "Projeto j√° existe em $PROJECT_PATH"
        read -p "Deseja reinstalar? Isso remover√° todos os dados! (y/N): " REINSTALL
        if [[ ! "$REINSTALL" =~ ^[Yy]$ ]]; then
            info "Instala√ß√£o cancelada."
            return
        fi
    fi
    
    # Executar script de deploy
    if [[ -f "deploy.sh" ]]; then
        chmod +x deploy.sh
        ./deploy.sh
    else
        error "Script deploy.sh n√£o encontrado!"
        error "Certifique-se de estar na pasta instalador/"
        exit 1
    fi
}

# Atualizar projeto
update_project() {
    clear
    echo -e "${CYAN}üîÑ Atualiza√ß√£o do Projeto${NC}"
    echo -e "${YELLOW}=========================${NC}"
    echo ""
    
    check_installation
    
    # Fazer backup do banco de dados
    if [[ -f "$PROJECT_PATH/database.sqlite" ]]; then
        log "Fazendo backup do banco de dados..."
        cp "$PROJECT_PATH/database.sqlite" "$PROJECT_PATH/database.sqlite.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Parar servi√ßo
    log "Parando servi√ßo..."
    sudo systemctl stop "$SERVICE_NAME"
    
    # Fazer backup do .env
    if [[ -f "$PROJECT_PATH/.env" ]]; then
        cp "$PROJECT_PATH/.env" "$PROJECT_PATH/.env.backup"
    fi
    
    # Atualizar c√≥digo
    log "Atualizando c√≥digo do reposit√≥rio..."
    cd "$PROJECT_PATH"
    
    # Salvar mudan√ßas locais se houver
    if git status --porcelain | grep -q .; then
        warning "Existem mudan√ßas locais n√£o commitadas."
        read -p "Deseja salvar as mudan√ßas em um stash? (y/N): " STASH
        if [[ "$STASH" =~ ^[Yy]$ ]]; then
            git stash push -m "Backup antes da atualiza√ß√£o $(date)"
        fi
    fi
    
    # Fazer pull
    git fetch origin
    git reset --hard origin/main
    
    # Restaurar .env
    if [[ -f "$PROJECT_PATH/.env.backup" ]]; then
        mv "$PROJECT_PATH/.env.backup" "$PROJECT_PATH/.env"
    fi
    
    # Atualizar depend√™ncias
    log "Atualizando depend√™ncias do servidor..."
    npm install
    
    log "Atualizando depend√™ncias do cliente..."
    cd "$PROJECT_PATH/client"
    npm install
    
    # Rebuild do projeto
    log "Reconstruindo projeto React..."
    cd "$PROJECT_PATH"
    npm run build
    
    # Reiniciar servi√ßo
    log "Reiniciando servi√ßo..."
    sudo systemctl start "$SERVICE_NAME"
    
    # Verificar status
    sleep 3
    if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
        log "‚úÖ Projeto atualizado com sucesso!"
    else
        error "‚ùå Erro ao reiniciar o servi√ßo"
        sudo systemctl status "$SERVICE_NAME"
    fi
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Remover projeto
remove_project() {
    clear
    echo -e "${CYAN}üóëÔ∏è  Remo√ß√£o do Projeto${NC}"
    echo -e "${YELLOW}======================${NC}"
    echo ""
    
    warning "ATEN√á√ÉO: Esta a√ß√£o ir√° remover completamente o projeto e todos os dados!"
    echo ""
    echo "O que ser√° removido:"
    echo "- Diret√≥rio do projeto: $PROJECT_PATH"
    echo "- Servi√ßo systemd: $SERVICE_NAME"
    echo "- Configura√ß√£o Nginx"
    echo "- Certificados SSL (opcional)"
    echo ""
    
    read -p "Tem certeza que deseja continuar? Digite 'REMOVER' para confirmar: " CONFIRM
    
    if [[ "$CONFIRM" != "REMOVER" ]]; then
        info "Remo√ß√£o cancelada."
        return
    fi
    
    # Parar e remover servi√ßo
    log "Parando e removendo servi√ßo..."
    sudo systemctl stop "$SERVICE_NAME" 2>/dev/null || true
    sudo systemctl disable "$SERVICE_NAME" 2>/dev/null || true
    sudo rm -f "/etc/systemd/system/$SERVICE_NAME.service"
    sudo systemctl daemon-reload
    
    # Remover configura√ß√£o Nginx
    log "Removendo configura√ß√£o Nginx..."
    sudo rm -f "/etc/nginx/sites-enabled/novusio"
    sudo rm -f "/etc/nginx/sites-available/novusio"
    sudo systemctl reload nginx
    
    # Perguntar sobre SSL
    read -p "Deseja remover os certificados SSL? (y/N): " REMOVE_SSL
    if [[ "$REMOVE_SSL" =~ ^[Yy]$ ]]; then
        log "Removendo certificados SSL..."
        sudo certbot delete --cert-name "$(hostname)" --non-interactive 2>/dev/null || true
    fi
    
    # Remover diret√≥rio do projeto
    log "Removendo diret√≥rio do projeto..."
    sudo rm -rf "$PROJECT_PATH"
    
    # Remover logs
    log "Removendo logs..."
    sudo rm -f "/var/log/nginx/novusio_*.log"
    
    log "‚úÖ Projeto removido com sucesso!"
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Gerenciar logs
manage_logs() {
    clear
    echo -e "${CYAN}üìù Gerenciamento de Logs${NC}"
    echo -e "${YELLOW}========================${NC}"
    echo ""
    
    while true; do
        echo "1. Ver logs do servi√ßo (√∫ltimas 50 linhas)"
        echo "2. Ver logs do servi√ßo em tempo real"
        echo "3. Ver logs do Nginx"
        echo "4. Ver logs de erro do Nginx"
        echo "5. Limpar logs antigos"
        echo "0. Voltar ao menu principal"
        echo ""
        read -p "Escolha uma op√ß√£o: " LOG_OPTION
        
        case $LOG_OPTION in
            1)
                clear
                echo -e "${BLUE}Logs do servi√ßo (√∫ltimas 50 linhas):${NC}"
                sudo journalctl -u "$SERVICE_NAME" --no-pager -n 50
                echo ""
                read -p "Pressione Enter para continuar..."
                ;;
            2)
                clear
                echo -e "${BLUE}Logs do servi√ßo em tempo real (Ctrl+C para sair):${NC}"
                sudo journalctl -u "$SERVICE_NAME" -f
                ;;
            3)
                clear
                echo -e "${BLUE}Logs do Nginx:${NC}"
                sudo tail -50 /var/log/nginx/novusio_access.log 2>/dev/null || echo "Arquivo de log n√£o encontrado"
                echo ""
                read -p "Pressione Enter para continuar..."
                ;;
            4)
                clear
                echo -e "${BLUE}Logs de erro do Nginx:${NC}"
                sudo tail -50 /var/log/nginx/novusio_error.log 2>/dev/null || echo "Arquivo de log n√£o encontrado"
                echo ""
                read -p "Pressione Enter para continuar..."
                ;;
            5)
                clear
                echo -e "${BLUE}Limpando logs antigos...${NC}"
                sudo journalctl --vacuum-time=7d
                sudo find /var/log -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
                log "Logs antigos removidos!"
                echo ""
                read -p "Pressione Enter para continuar..."
                ;;
            0)
                break
                ;;
            *)
                error "Op√ß√£o inv√°lida!"
                ;;
        esac
        clear
        echo -e "${CYAN}üìù Gerenciamento de Logs${NC}"
        echo -e "${YELLOW}========================${NC}"
        echo ""
    done
}

# Backup do projeto
backup_project() {
    clear
    echo -e "${CYAN}üíæ Backup do Projeto${NC}"
    echo -e "${YELLOW}====================${NC}"
    echo ""
    
    check_installation
    
    BACKUP_DIR="/home/$(whoami)/backups"
    BACKUP_FILE="novusio_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    # Criar diret√≥rio de backup
    mkdir -p "$BACKUP_DIR"
    
    log "Criando backup do projeto..."
    
    # Criar backup
    cd "$PROJECT_PATH/.."
    tar -czf "$BACKUP_DIR/$BACKUP_FILE" \
        --exclude="node_modules" \
        --exclude="client/node_modules" \
        --exclude="client/dist" \
        --exclude=".git" \
        site-novusio/
    
    # Verificar se o backup foi criado
    if [[ -f "$BACKUP_DIR/$BACKUP_FILE" ]]; then
        log "‚úÖ Backup criado com sucesso: $BACKUP_DIR/$BACKUP_FILE"
        echo "Tamanho: $(du -h "$BACKUP_DIR/$BACKUP_FILE" | cut -f1)"
    else
        error "‚ùå Erro ao criar backup"
        return 1
    fi
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Restaurar backup
restore_backup() {
    clear
    echo -e "${CYAN}üîÑ Restaurar Backup${NC}"
    echo -e "${YELLOW}==================${NC}"
    echo ""
    
    BACKUP_DIR="/home/$(whoami)/backups"
    
    if [[ ! -d "$BACKUP_DIR" ]]; then
        error "Diret√≥rio de backups n√£o encontrado: $BACKUP_DIR"
        return 1
    fi
    
    # Listar backups dispon√≠veis
    echo "Backups dispon√≠veis:"
    ls -la "$BACKUP_DIR"/*.tar.gz 2>/dev/null || {
        error "Nenhum backup encontrado!"
        return 1
    }
    echo ""
    
    read -p "Digite o nome do arquivo de backup: " BACKUP_FILE
    
    if [[ ! -f "$BACKUP_DIR/$BACKUP_FILE" ]]; then
        error "Arquivo de backup n√£o encontrado: $BACKUP_DIR/$BACKUP_FILE"
        return 1
    fi
    
    warning "ATEN√á√ÉO: Esta a√ß√£o ir√° substituir o projeto atual!"
    read -p "Tem certeza que deseja continuar? (y/N): " CONFIRM
    
    if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
        info "Restaura√ß√£o cancelada."
        return
    fi
    
    # Parar servi√ßo
    log "Parando servi√ßo..."
    sudo systemctl stop "$SERVICE_NAME"
    
    # Fazer backup do estado atual
    if [[ -d "$PROJECT_PATH" ]]; then
        mv "$PROJECT_PATH" "$PROJECT_PATH.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Restaurar backup
    log "Restaurando backup..."
    cd "/home/$(whoami)"
    tar -xzf "$BACKUP_DIR/$BACKUP_FILE"
    
    # Reinstalar depend√™ncias
    log "Reinstalando depend√™ncias..."
    cd "$PROJECT_PATH"
    npm install
    cd "$PROJECT_PATH/client"
    npm install
    
    # Rebuild do projeto
    log "Reconstruindo projeto..."
    cd "$PROJECT_PATH"
    npm run build
    
    # Reiniciar servi√ßo
    log "Reiniciando servi√ßo..."
    sudo systemctl start "$SERVICE_NAME"
    
    log "‚úÖ Backup restaurado com sucesso!"
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Menu principal
main_menu() {
    while true; do
        show_banner
        
        echo -e "${CYAN}Escolha uma op√ß√£o:${NC}"
        echo ""
        echo "1. üöÄ Instalar Projeto"
        echo "2. üîÑ Atualizar Projeto"
        echo "3. üìä Ver Status do Sistema"
        echo "4. üìù Gerenciar Logs"
        echo "5. üíæ Backup do Projeto"
        echo "6. üîÑ Restaurar Backup"
        echo "7. üóëÔ∏è  Remover Projeto"
        echo "0. üö™ Sair"
        echo ""
        read -p "Digite sua op√ß√£o: " OPTION
        
        case $OPTION in
            1)
                install_project
                ;;
            2)
                update_project
                ;;
            3)
                show_status
                ;;
            4)
                manage_logs
                ;;
            5)
                backup_project
                ;;
            6)
                restore_backup
                ;;
            7)
                remove_project
                ;;
            0)
                echo ""
                log "Saindo do menu..."
                exit 0
                ;;
            *)
                error "Op√ß√£o inv√°lida! Tente novamente."
                sleep 2
                ;;
        esac
    done
}

# Verifica√ß√µes iniciais
check_root

# Executar menu principal
main_menu
