#!/bin/bash

# üéõÔ∏è Menu Principal - Site Novusio
# Script interativo para instala√ß√£o e configura√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Fun√ß√£o para imprimir t√≠tulo
print_title() {
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                                                                                ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                    üöÄ SITE NOVUSIO - INSTALADOR AUTOM√ÅTICO                    ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                                                                                ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                        Sistema de Deploy para VPS                               ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                                                                                ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_menu() {
    echo -e "${PURPLE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
    echo -e "${CYAN}üìã OP√á√ïES DISPON√çVEIS:${NC}"
    echo ""
echo -e "${GREEN}1.${NC} üÜï ${YELLOW}Instala√ß√£o Completa (Do Zero)${NC}"
echo -e "   ‚Ä¢ Configurar dom√≠nio, email e Git"
echo -e "   ‚Ä¢ Instalar Node.js, Nginx, PM2, Fail2ban"
echo -e "   ‚Ä¢ Configurar firewall e seguran√ßa"
echo -e "   ‚Ä¢ Configurar .env automaticamente"
    echo ""
    echo -e "${GREEN}2.${NC} üîÑ ${YELLOW}Atualizar Aplica√ß√£o${NC}"
    echo -e "   ‚Ä¢ Atualizar c√≥digo da aplica√ß√£o"
    echo -e "   ‚Ä¢ Reinstalar depend√™ncias"
    echo -e "   ‚Ä¢ Reiniciar servi√ßos"
    echo ""
    echo -e "${GREEN}3.${NC} ‚öôÔ∏è  ${YELLOW}Configurar Sistema${NC}"
    echo -e "   ‚Ä¢ Configurar dom√≠nio, email e Git"
    echo -e "   ‚Ä¢ Editar vari√°veis de ambiente"
    echo -e "   ‚Ä¢ Gerar novos secrets"
    echo ""
    echo -e "${GREEN}4.${NC} üîí ${YELLOW}Configurar SSL${NC}"
    echo -e "   ‚Ä¢ Instalar certificados SSL"
    echo -e "   ‚Ä¢ Configurar renova√ß√£o autom√°tica"
    echo ""
    echo -e "${GREEN}5.${NC} üíæ ${YELLOW}Backup/Restore${NC}"
    echo -e "   ‚Ä¢ Criar backup manual"
    echo -e "   ‚Ä¢ Restaurar backup"
    echo -e "   ‚Ä¢ Listar backups dispon√≠veis"
    echo ""
    echo -e "${GREEN}6.${NC} üõ†Ô∏è  ${YELLOW}Gerenciar Servi√ßos${NC}"
    echo -e "   ‚Ä¢ Iniciar/Parar aplica√ß√£o"
    echo -e "   ‚Ä¢ Ver status dos servi√ßos"
    echo -e "   ‚Ä¢ Ver logs em tempo real"
    echo ""
    echo -e "${GREEN}7.${NC} üîç ${YELLOW}Verificar Sistema${NC}"
    echo -e "   ‚Ä¢ Verificar status da aplica√ß√£o"
    echo -e "   ‚Ä¢ Verificar configura√ß√µes"
    echo -e "   ‚Ä¢ Testar conectividade"
    echo ""
    echo -e "${GREEN}8.${NC} üîß ${YELLOW}Diagn√≥stico e Corre√ß√£o${NC}"
    echo -e "   ‚Ä¢ Diagnosticar problemas"
    echo -e "   ‚Ä¢ Corrigir locks do APT"
    echo -e "   ‚Ä¢ Verificar sistema"
    echo ""
    echo -e "${GREEN}9.${NC} üÜò ${YELLOW}Suporte e Logs${NC}"
    echo -e "   ‚Ä¢ Ver logs de erro"
    echo -e "   ‚Ä¢ Informa√ß√µes de sistema"
    echo -e "   ‚Ä¢ Comandos de diagn√≥stico"
    echo ""
    echo -e "${GREEN}0.${NC} ‚ùå ${RED}Sair${NC}"
    echo ""
    echo -e "${PURPLE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
}

# Fun√ß√£o para verificar se est√° rodando como root
check_user() {
    if [[ $EUID -ne 0 ]]; then
        print_error "Este script deve ser executado como root."
        exit 1
    fi
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    local missing_deps=()
    
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if ! command -v wget &> /dev/null; then
        missing_deps+=("wget")
    fi
    
    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_warning "Depend√™ncias faltando: ${missing_deps[*]}"
        read -p "Instalar depend√™ncias automaticamente? (y/N): " install_deps
        
        if [[ "$install_deps" == "y" || "$install_deps" == "Y" ]]; then
            print_status "Instalando depend√™ncias..."
            apt update
            apt install -y "${missing_deps[@]}"
            print_success "Depend√™ncias instaladas"
        else
            print_error "Depend√™ncias necess√°rias n√£o instaladas"
            exit 1
        fi
    fi
}

# Fun√ß√£o para instala√ß√£o completa
install_complete() {
    print_title
    echo -e "${YELLOW}üÜï INSTALA√á√ÉO COMPLETA (DO ZERO)${NC}"
    echo ""
    
    print_warning "‚ö†Ô∏è Esta op√ß√£o ir√°:"
    echo "‚Ä¢ Instalar Node.js, Nginx, PM2, Certbot, Fail2ban"
    echo "‚Ä¢ Configurar firewall e seguran√ßa"
    echo "‚Ä¢ Criar usu√°rio e estrutura de diret√≥rios"
    echo "‚Ä¢ Configurar servi√ßos do systemd"
    echo ""
    
    read -p "Continuar com a instala√ß√£o completa? (y/N): " confirm
    
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        print_status "Iniciando instala√ß√£o completa..."
        
        if [[ -f "./install.sh" ]]; then
            ./install.sh
        else
            print_error "Script de instala√ß√£o n√£o encontrado: install.sh"
            return 1
        fi
        
        print_success "Instala√ß√£o completa finalizada!"
        echo ""
        print_status "Pr√≥ximos passos:"
        echo "1. Configure SSL (op√ß√£o 4)"
        echo "2. Inicie a aplica√ß√£o (op√ß√£o 6)"
        echo "3. Verifique o sistema (op√ß√£o 7)"
    else
        print_status "Instala√ß√£o cancelada"
    fi
}

# Fun√ß√£o para atualizar aplica√ß√£o
update_app() {
    print_title
    echo -e "${YELLOW}üîÑ ATUALIZAR APLICA√á√ÉO${NC}"
    echo ""
    
    print_status "Esta op√ß√£o ir√°:"
    echo "‚Ä¢ Fazer backup da aplica√ß√£o atual"
    echo "‚Ä¢ Atualizar c√≥digo da aplica√ß√£o"
    echo "‚Ä¢ Reinstalar depend√™ncias"
    echo "‚Ä¢ Reiniciar servi√ßos"
    echo ""
    
    read -p "Continuar com a atualiza√ß√£o? (y/N): " confirm
    
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        print_status "Iniciando atualiza√ß√£o..."
        
        if [[ -f "./deploy.sh" ]]; then
            ./deploy.sh
        else
            print_error "Script de deploy n√£o encontrado: deploy.sh"
            return 1
        fi
        
        print_success "Atualiza√ß√£o finalizada!"
    else
        print_status "Atualiza√ß√£o cancelada"
    fi
}

# Fun√ß√£o para configurar sistema
configure_system() {
    print_title
    echo -e "${YELLOW}‚öôÔ∏è CONFIGURAR SISTEMA${NC}"
    echo ""
    
    echo "1. üîß Configurar Dom√≠nio, Email e Git"
    echo "2. üìù Editar arquivo .env manualmente"
    echo "3. üîê Gerar novos secrets"
    echo "0. üö™ Voltar"
    echo ""
    read -p "Op√ß√£o: " config_option
    
    case $config_option in
        1)
            print_status "Executando gerenciador de configura√ß√µes..."
            if [[ -f "./config-manager.sh" ]]; then
                chmod +x ./config-manager.sh
                ./config-manager.sh
            else
                print_error "Gerenciador de configura√ß√µes n√£o encontrado"
            fi
            ;;
        2)
            print_status "Editando arquivo .env existente..."
            nano /opt/novusio/.env
            ;;
        3)
            print_status "Gerando novos secrets..."
            if [[ -f "./regenerate-secrets.sh" ]]; then
                ./regenerate-secrets.sh
            else
                print_warning "Script de gera√ß√£o de secrets n√£o encontrado"
            fi
            ;;
        0)
            return
            ;;
        *)
            print_error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Fun√ß√£o para configurar SSL
configure_ssl() {
    print_title
    echo -e "${YELLOW}üîí CONFIGURAR SSL${NC}"
    echo ""
    
    print_status "Esta op√ß√£o ir√°:"
    echo "‚Ä¢ Instalar certificados SSL com Certbot"
    echo "‚Ä¢ Configurar renova√ß√£o autom√°tica"
    echo "‚Ä¢ Configurar redirecionamento HTTPS"
    echo ""
    
    read -p "Continuar com a configura√ß√£o SSL? (y/N): " confirm
    
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        print_status "Iniciando configura√ß√£o SSL..."
        
        if [[ -f "./setup-ssl.sh" ]]; then
            ./setup-ssl.sh
        else
            print_error "Script de SSL n√£o encontrado: setup-ssl.sh"
            return 1
        fi
        
        print_success "Configura√ß√£o SSL finalizada!"
    else
        print_status "Configura√ß√£o SSL cancelada"
    fi
}

# Fun√ß√£o para backup/restore
backup_restore() {
    print_title
    echo -e "${YELLOW}üíæ BACKUP/RESTORE${NC}"
    echo ""
    
    echo "Escolha uma op√ß√£o:"
    echo "1. Criar backup manual"
    echo "2. Listar backups dispon√≠veis"
    echo "3. Restaurar backup"
    echo "0. Voltar ao menu principal"
    echo ""
    
    read -p "Op√ß√£o: " backup_option
    
    case $backup_option in
        1)
            print_status "Criando backup manual..."
            if [[ -f "./backup.sh" ]]; then
                ./backup.sh
            else
                print_error "Script de backup n√£o encontrado: backup.sh"
            fi
            ;;
        2)
            print_status "Listando backups dispon√≠veis..."
            if [[ -d "/opt/novusio/backups" ]]; then
                ls -lh /opt/novusio/backups/
            else
                print_warning "Diret√≥rio de backups n√£o encontrado"
            fi
            ;;
        3)
            print_warning "Funcionalidade de restore ser√° implementada em breve"
            ;;
        0)
            return
            ;;
        *)
            print_error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Fun√ß√£o para gerenciar servi√ßos
manage_services() {
    print_title
    echo -e "${YELLOW}üõ†Ô∏è GERENCIAR SERVI√áOS${NC}"
    echo ""
    
    echo "Escolha uma op√ß√£o:"
    echo "1. Iniciar aplica√ß√£o"
    echo "2. Parar aplica√ß√£o"
    echo "3. Reiniciar aplica√ß√£o"
    echo "4. Ver status dos servi√ßos"
    echo "5. Ver logs em tempo real"
    echo "0. Voltar ao menu principal"
    echo ""
    
    read -p "Op√ß√£o: " service_option
    
    case $service_option in
        1)
            print_status "Iniciando aplica√ß√£o..."
            systemctl start novusio
            print_success "Aplica√ß√£o iniciada"
            ;;
        2)
            print_status "Parando aplica√ß√£o..."
            systemctl stop novusio
            print_success "Aplica√ß√£o parada"
            ;;
        3)
            print_status "Reiniciando aplica√ß√£o..."
            systemctl restart novusio
            print_success "Aplica√ß√£o reiniciada"
            ;;
        4)
            print_status "Status dos servi√ßos:"
            systemctl status novusio nginx fail2ban --no-pager
            ;;
        5)
            print_status "Logs em tempo real (Ctrl+C para sair):"
            journalctl -u novusio -f
            ;;
        0)
            return
            ;;
        *)
            print_error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Fun√ß√£o para diagn√≥stico e corre√ß√£o
diagnose_and_fix() {
    print_title
    echo -e "${YELLOW}üîß DIAGN√ìSTICO E CORRE√á√ÉO${NC}"
    echo ""
    
    echo "1. üîç Diagnosticar problemas"
    echo "2. üîí Corrigir locks do APT"
    echo "3. üì¶ Verificar pacotes essenciais"
    echo "4. üîÑ Reiniciar servi√ßos"
    echo "0. üö™ Voltar"
    echo ""
    read -p "Op√ß√£o: " diag_option
    
    case $diag_option in
        1)
            print_status "Executando diagn√≥stico..."
            if [[ -f "./diagnostico.sh" ]]; then
                chmod +x ./diagnostico.sh
                ./diagnostico.sh
            else
                print_error "Script de diagn√≥stico n√£o encontrado"
            fi
            ;;
        2)
            print_status "Corrigindo locks do APT..."
            if [[ -f "./fix-apt-lock.sh" ]]; then
                chmod +x ./fix-apt-lock.sh
                ./fix-apt-lock.sh
            else
                print_error "Script de corre√ß√£o n√£o encontrado"
            fi
            ;;
        3)
            print_status "Verificando pacotes essenciais..."
            apt update
            apt install -y curl wget git unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release nodejs npm nginx certbot python3-certbot-nginx fail2ban
            print_success "Pacotes verificados"
            ;;
        4)
            print_status "Reiniciando servi√ßos..."
            systemctl restart nginx
            systemctl restart fail2ban
            if systemctl list-unit-files | grep -q "^novusio.service"; then
                systemctl restart novusio
            fi
            print_success "Servi√ßos reiniciados"
            ;;
        0)
            return
            ;;
        *)
            print_error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Fun√ß√£o para verificar sistema
verify_system() {
    print_title
    echo -e "${YELLOW}üîç VERIFICAR SISTEMA${NC}"
    echo ""
    
    print_status "Verificando status da aplica√ß√£o..."
    
    # Status da aplica√ß√£o
    if systemctl is-active --quiet novusio; then
        print_success "‚úÖ Aplica√ß√£o: RODANDO"
    else
        print_error "‚ùå Aplica√ß√£o: PARADA"
    fi
    
    # Status do Nginx
    if systemctl is-active --quiet nginx; then
        print_success "‚úÖ Nginx: RODANDO"
    else
        print_error "‚ùå Nginx: PARADO"
    fi
    
    # Status do Fail2ban
    if systemctl is-active --quiet fail2ban; then
        print_success "‚úÖ Fail2ban: ATIVO"
    else
        print_warning "‚ö†Ô∏è Fail2ban: INATIVO"
    fi
    
    # Status do SSL
    if [[ -d "/etc/letsencrypt/live" ]]; then
        print_success "‚úÖ SSL: CONFIGURADO"
    else
        print_warning "‚ö†Ô∏è SSL: N√ÉO CONFIGURADO"
    fi
    
    # Portas
    echo ""
    print_status "Verificando portas..."
    if netstat -tlnp 2>/dev/null | grep -q ":3000"; then
        print_success "‚úÖ Porta 3000: ATIVA"
    else
        print_error "‚ùå Porta 3000: INATIVA"
    fi
    
    if netstat -tlnp 2>/dev/null | grep -q ":80"; then
        print_success "‚úÖ Porta 80: ATIVA"
    else
        print_error "‚ùå Porta 80: INATIVA"
    fi
    
    if netstat -tlnp 2>/dev/null | grep -q ":443"; then
        print_success "‚úÖ Porta 443: ATIVA"
    else
        print_error "‚ùå Porta 443: INATIVA"
    fi
    
    # Teste de conectividade
    echo ""
    print_status "Testando conectividade..."
    if curl -f -s http://localhost:3000/api/health > /dev/null; then
        print_success "‚úÖ API respondendo"
    else
        print_warning "‚ö†Ô∏è API n√£o respondendo"
    fi
}

# Fun√ß√£o para suporte e logs
support_logs() {
    print_title
    echo -e "${YELLOW}üÜò SUPORTE E LOGS${NC}"
    echo ""
    
    echo "Escolha uma op√ß√£o:"
    echo "1. Ver logs de erro recentes"
    echo "2. Ver informa√ß√µes do sistema"
    echo "3. Verificar espa√ßo em disco"
    echo "4. Verificar uso de mem√≥ria"
    echo "5. Comandos de diagn√≥stico"
    echo "0. Voltar ao menu principal"
    echo ""
    
    read -p "Op√ß√£o: " support_option
    
    case $support_option in
        1)
            print_status "Logs de erro recentes:"
            journalctl -u novusio --since "1 hour ago" | grep -i error | tail -20
            ;;
        2)
            print_status "Informa√ß√µes do sistema:"
            echo "OS: $(lsb_release -d | cut -f2)"
            echo "Kernel: $(uname -r)"
            echo "Uptime: $(uptime -p)"
            echo "Node.js: $(node --version 2>/dev/null || echo 'N√£o instalado')"
            echo "NPM: $(npm --version 2>/dev/null || echo 'N√£o instalado')"
            ;;
        3)
            print_status "Espa√ßo em disco:"
            df -h
            ;;
        4)
            print_status "Uso de mem√≥ria:"
            free -h
            ;;
        5)
            print_status "Comandos de diagn√≥stico √∫teis:"
            echo "‚Ä¢ Logs da aplica√ß√£o: journalctl -u novusio -f"
            echo "‚Ä¢ Logs do Nginx: tail -f /var/log/nginx/error.log"
            echo "‚Ä¢ Status dos servi√ßos: systemctl status novusio nginx"
            echo "‚Ä¢ Testar Nginx: nginx -t"
            echo "‚Ä¢ Verificar SSL: certbot certificates"
            ;;
        0)
            return
            ;;
        *)
            print_error "Op√ß√£o inv√°lida"
            ;;
    esac
}

# Fun√ß√£o principal
main() {
    # Verificar usu√°rio
    check_user
    
    # Verificar depend√™ncias
    check_dependencies
    
    while true; do
        print_title
        print_menu
        
        read -p "Digite sua op√ß√£o (0-8): " choice
        
        case $choice in
            1)
                install_complete
                ;;
            2)
                update_app
                ;;
        3)
            configure_system
            ;;
            4)
                configure_ssl
                ;;
            5)
                backup_restore
                ;;
            6)
                manage_services
                ;;
            7)
                verify_system
                ;;
            8)
                diagnose_and_fix
                ;;
            9)
                support_logs
                ;;
            0)
                print_success "Saindo do instalador..."
                echo ""
                echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
                echo -e "${GREEN}‚úÖ Obrigado por usar o instalador do Site Novusio!${NC}"
                echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
                echo ""
                exit 0
                ;;
            *)
                print_error "Op√ß√£o inv√°lida. Digite um n√∫mero de 0 a 9."
                ;;
        esac
        
        echo ""
        read -p "Pressione Enter para continuar..."
    done
}

# Executar fun√ß√£o principal
main
